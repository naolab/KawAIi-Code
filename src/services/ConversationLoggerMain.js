/**
 * „É°„Ç§„É≥„Éó„É≠„Çª„ÇπÁî®JSON‰ºöË©±„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†
 * - JSON„Éï„Ç°„Ç§„É´„Å´„Çà„Çã‰ºöË©±„É≠„Ç∞‰øùÂ≠òÔºàÈÖçÂ∏ÉÂØæÂøúÔºâ
 * - „É°„É¢„É™„Ç≠„É£„ÉÉ„Ç∑„É•„ÅßÈ´òÈÄü„Ç¢„ÇØ„Çª„Çπ
 * - ‰æùÂ≠òÈñ¢‰øÇ„Çº„É≠„ÄÅ„Ç§„É≥„Çπ„Éà„Éº„É´‰∏çË¶Å
 * - Êó¢Â≠ò„É≠„Ç∞ÂΩ¢Âºè„Å®„ÅÆ‰∫íÊèõÊÄß„Çí‰øùÊåÅ
 */

const path = require('path');
const fs = require('fs');
const os = require('os');

class ConversationLoggerMain {
    constructor() {
        this.logPath = path.join(os.homedir(), '.claude', 'conversation_log.json');
        this.isInitialized = false;
        this.logPrefix = 'üíæ [ConversationLoggerMain]';
        
        // „É°„É¢„É™„Ç≠„É£„ÉÉ„Ç∑„É•
        this.cache = [];
        this.maxCacheSize = 100; // ÊúÄÂ§ß100‰ª∂„Çí„É°„É¢„É™„Å´‰øùÊåÅ
        
        // Áµ±Ë®àÊÉÖÂ†±
        this.stats = {
            totalLogs: 0,
            sessionLogs: 0,
            errors: 0,
            startTime: Date.now()
        };
        
        // „É≠„Ç∞„Éá„Éº„ÇøÊßãÈÄ†
        this.logData = {
            version: "1.0",
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            stats: this.stats,
            logs: []
        };
    }

    /**
     * „É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ
     */
    async initialize() {
        try {
            // .claude„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
            const claudeDir = path.dirname(this.logPath);
            if (!fs.existsSync(claudeDir)) {
                fs.mkdirSync(claudeDir, { recursive: true });
                console.log(`${this.logPrefix} „Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê: ${claudeDir}`);
            }

            // Êó¢Â≠ò„É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
            await this.loadFromFile();
            
            this.isInitialized = true;
            console.log(`${this.logPrefix} ÂàùÊúüÂåñÂÆå‰∫Ü - Êó¢Â≠ò„É≠„Ç∞: ${this.stats.totalLogs}‰ª∂`);
            
            return { success: true, totalLogs: this.stats.totalLogs };
            
        } catch (error) {
            console.error(`${this.logPrefix} ÂàùÊúüÂåñ„Ç®„É©„Éº:`, error);
            this.stats.errors++;
            return { success: false, error: error.message };
        }
    }

    /**
     * „Éï„Ç°„Ç§„É´„Åã„Çâ„É≠„Ç∞„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
     */
    async loadFromFile() {
        try {
            if (fs.existsSync(this.logPath)) {
                const fileContent = fs.readFileSync(this.logPath, 'utf8');
                const data = JSON.parse(fileContent);
                
                // „Éá„Éº„Çø„ÅÆÊ§úË®º„Å®Áµ±Âêà
                if (data.logs && Array.isArray(data.logs)) {
                    this.logData = data;
                    this.stats.totalLogs = data.logs.length;
                    
                    // ÊúÄÊñ∞„ÅÆ„É≠„Ç∞„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´Ë™≠„ÅøËæº„Åø
                    this.cache = data.logs.slice(-this.maxCacheSize);
                    
                    console.log(`${this.logPrefix} „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø: ${this.stats.totalLogs}‰ª∂`);
                } else {
                    console.log(`${this.logPrefix} Êñ∞Ë¶è„É≠„Ç∞„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê`);
                }
            } else {
                console.log(`${this.logPrefix} Êñ∞Ë¶è„É≠„Ç∞„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê`);
            }
        } catch (error) {
            console.error(`${this.logPrefix} „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:`, error);
            // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇÁ∂ôÁ∂öÔºàÊñ∞Ë¶è‰ΩúÊàê„Å®„Åó„Å¶Êâ±„ÅÜÔºâ
        }
    }

    /**
     * „Éï„Ç°„Ç§„É´„Å´„É≠„Ç∞„Éá„Éº„Çø„Çí‰øùÂ≠ò
     */
    async saveToFile() {
        try {
            // Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
            this.logData.updated = new Date().toISOString();
            this.logData.stats = this.stats;
            
            // „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
            const jsonContent = JSON.stringify(this.logData, null, 2);
            fs.writeFileSync(this.logPath, jsonContent, 'utf8');
            
            return { success: true };
        } catch (error) {
            console.error(`${this.logPrefix} „Éï„Ç°„Ç§„É´‰øùÂ≠ò„Ç®„É©„Éº:`, error);
            this.stats.errors++;
            return { success: false, error: error.message };
        }
    }

    /**
     * ‰ºöË©±„É≠„Ç∞„ÅÆ‰øùÂ≠ò
     * @param {string} text - ‰øùÂ≠ò„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà
     * @param {string} sessionId - „Çª„ÉÉ„Ç∑„Éß„É≥IDÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
     */
    async saveLog(text, sessionId = null) {
        if (!this.isInitialized) {
            console.log(`${this.logPrefix} Êú™ÂàùÊúüÂåñ„ÅÆ„Åü„ÇÅ‰øùÂ≠ò„Çí„Çπ„Ç≠„ÉÉ„Éó: "${text.substring(0, 30)}..."`);
            return { success: false, error: 'Logger not initialized' };
        }

        try {
            const cleanText = this.cleanText(text);
            if (!cleanText) {
                return { success: false, error: 'Empty text after cleaning' };
            }

            // Êñ∞„Åó„ÅÑ„É≠„Ç∞„Ç®„É≥„Éà„É™„Çí‰ΩúÊàê
            const logEntry = {
                id: Date.now(),
                timestamp: new Date().toISOString(),
                text: cleanText,
                sessionId: sessionId,
                source: 'kawaii-app'
            };

            // „É°„É¢„É™„Ç≠„É£„ÉÉ„Ç∑„É•„Å´ËøΩÂä†
            this.cache.push(logEntry);
            if (this.cache.length > this.maxCacheSize) {
                this.cache.shift(); // Âè§„ÅÑ„ÇÇ„ÅÆ„ÇíÂâäÈô§
            }

            // „É≠„Ç∞„Éá„Éº„Çø„Å´ËøΩÂä†
            this.logData.logs.push(logEntry);
            
            // Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
            this.stats.sessionLogs++;
            this.stats.totalLogs++;
            
            // „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
            const saveResult = await this.saveToFile();
            if (!saveResult.success) {
                throw new Error(saveResult.error);
            }
            
            console.log(`${this.logPrefix} „É≠„Ç∞‰øùÂ≠òÂÆå‰∫Ü: "${cleanText.substring(0, 50)}..." (Á∑èÊï∞: ${this.stats.totalLogs})`);
            
            return { success: true, logId: logEntry.id, totalLogs: this.stats.totalLogs };
            
        } catch (error) {
            this.stats.errors++;
            console.error(`${this.logPrefix} ‰øùÂ≠ò„Ç®„É©„Éº:`, error);
            return { success: false, error: error.message };
        }
    }

    /**
     * „É≠„Ç∞„ÅÆË™≠„ÅøËæº„Åø
     * @param {number} limit - ÂèñÂæó‰ª∂Êï∞
     * @param {number} offset - „Ç™„Éï„Çª„ÉÉ„Éà
     */
    async getLogs(limit = 20, offset = 0) {
        if (!this.isInitialized) {
            await this.initialize();
        }

        try {
            // „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂèñÂæóÔºàÊúÄÊñ∞„ÅÆ„É≠„Ç∞„ÇíÂÑ™ÂÖàÔºâ
            let logs = [];
            
            if (this.cache.length >= limit && offset === 0) {
                // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅßË∂≥„Çä„ÇãÂ†¥Âêà
                logs = this.cache.slice(-limit).reverse();
            } else {
                // „Éï„Ç°„Ç§„É´„Åã„ÇâÁõ¥Êé•Ë™≠„ÅøËæº„Åø
                const allLogs = this.logData.logs.slice().reverse(); // Êñ∞„Åó„ÅÑÈ†Ü
                logs = allLogs.slice(offset, offset + limit);
            }

            // Êó¢Â≠òÂΩ¢Âºè„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
            const formattedLogs = this.formatLogs(logs);
            
            console.log(`${this.logPrefix} „É≠„Ç∞Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${formattedLogs.length}‰ª∂`);
            
            return {
                success: true,
                logs: formattedLogs,
                count: formattedLogs.length,
                total: this.stats.totalLogs
            };
            
        } catch (error) {
            this.stats.errors++;
            console.error(`${this.logPrefix} Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:`, error);
            return { 
                success: false, 
                error: error.message,
                logs: [],
                count: 0,
                total: 0
            };
        }
    }

    /**
     * „É≠„Ç∞„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàÊó¢Â≠òÂΩ¢Âºè„Å´Âêà„Çè„Åõ„ÇãÔºâ
     */
    formatLogs(logs) {
        return logs.map(log => ({
            id: log.id,
            timestamp: new Date(log.timestamp).toLocaleString(),
            text: log.text,
            source: log.source || 'kawaii-app',
            sessionId: log.sessionId,
            raw: `„Äé${log.text}„Äè` // Êó¢Â≠òÂΩ¢Âºè„Å´Âêà„Çè„Åõ„Çã
        }));
    }

    /**
     * „ÉÜ„Ç≠„Çπ„Éà„ÅÆ„ÇØ„É™„Éº„Éã„É≥„Ç∞
     */
    cleanText(text) {
        if (!text || typeof text !== 'string') {
            return null;
        }
        
        // „Äé„Äè„ÇíÈô§Âéª„Åó„Å¶‰∏≠Ë∫´„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅÆ„Åø„ÇíÊäΩÂá∫
        let cleaned = text.replace(/[„Äé„Äè]/g, '');
        
        // Á©∫ÁôΩ„ÅÆÊ≠£Ë¶èÂåñ
        cleaned = cleaned.replace(/\s+/g, ' ').trim();
        
        return cleaned || null;
    }

    /**
     * Áµ±Ë®àÊÉÖÂ†±„ÅÆÂèñÂæó
     */
    getStats() {
        const runtimeHours = (Date.now() - this.stats.startTime) / (1000 * 60 * 60);
        
        return {
            success: true,
            stats: {
                ...this.stats,
                runtimeHours: Math.round(runtimeHours * 100) / 100,
                logsPerHour: runtimeHours > 0 ? Math.round(this.stats.sessionLogs / runtimeHours) : 0,
                isInitialized: this.isInitialized,
                logPath: this.logPath,
                cacheSize: this.cache.length,
                fileSize: this.getFileSize()
            }
        };
    }

    /**
     * „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆ„Çµ„Ç§„Ç∫„ÇíÂèñÂæó
     */
    getFileSize() {
        try {
            if (fs.existsSync(this.logPath)) {
                const stats = fs.statSync(this.logPath);
                return Math.round(stats.size / 1024) + ' KB'; // KBÂçò‰Ωç
            }
            return '0 KB';
        } catch (error) {
            return 'Unknown';
        }
    }

    /**
     * „É≠„Ç∞„ÅÆ„ÇØ„É™„Ç¢Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
     */
    async clearLogs() {
        if (!this.isInitialized) {
            return { success: false, error: 'Logger not initialized' };
        }

        try {
            // „É≠„Ç∞„Éá„Éº„Çø„Çí„É™„Çª„ÉÉ„Éà
            this.logData.logs = [];
            this.cache = [];
            this.stats.totalLogs = 0;
            this.stats.sessionLogs = 0;
            
            // „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
            const saveResult = await this.saveToFile();
            if (!saveResult.success) {
                throw new Error(saveResult.error);
            }
            
            console.log(`${this.logPrefix} ÂÖ®„É≠„Ç∞„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü`);
            
            return { success: true, totalLogs: 0 };
            
        } catch (error) {
            console.error(`${this.logPrefix} „ÇØ„É™„Ç¢„Ç®„É©„Éº:`, error);
            return { success: false, error: error.message };
        }
    }

    /**
     * „É≠„Ç∞„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥ÔºàÂè§„ÅÑ„É≠„Ç∞„ÅÆÁÆ°ÁêÜÔºâ
     */
    async rotateLogsIfNeeded() {
        const maxLogs = 1000; // ÊúÄÂ§ß„É≠„Ç∞Êï∞
        
        if (this.logData.logs.length > maxLogs) {
            try {
                const oldLogs = this.logData.logs.slice(0, this.logData.logs.length - maxLogs);
                this.logData.logs = this.logData.logs.slice(-maxLogs);
                
                // Âè§„ÅÑ„É≠„Ç∞„Çí„Ç¢„Éº„Ç´„Ç§„Éñ
                const archivePath = this.logPath.replace('.json', `_archive_${Date.now()}.json`);
                const archiveData = {
                    version: "1.0",
                    archived: new Date().toISOString(),
                    logs: oldLogs
                };
                
                fs.writeFileSync(archivePath, JSON.stringify(archiveData, null, 2));
                console.log(`${this.logPrefix} Âè§„ÅÑ„É≠„Ç∞„Çí„Ç¢„Éº„Ç´„Ç§„Éñ: ${archivePath}`);
                
                await this.saveToFile();
                
            } catch (error) {
                console.error(`${this.logPrefix} „É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº:`, error);
            }
        }
    }

    /**
     * ÁµÇ‰∫ÜÂá¶ÁêÜ
     */
    async close() {
        if (this.isInitialized) {
            // ÂøÖË¶Å„Å´Âøú„Åò„Å¶„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥
            await this.rotateLogsIfNeeded();
            
            // ÊúÄÁµÇ‰øùÂ≠ò
            await this.saveToFile();
            
            console.log(`${this.logPrefix} ÁµÇ‰∫ÜÂá¶ÁêÜÂÆå‰∫Ü`);
        }
        this.isInitialized = false;
        return Promise.resolve();
    }
}

module.exports = ConversationLoggerMain;