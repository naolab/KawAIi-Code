import { useCallback, useRef } from 'react'
import * as THREE from 'three'
import { VRM } from '@pixiv/three-vrm'
import { loadVRMAnimation } from '@/lib/loadVRMAnimation'

// „É≠„Ç∞„É¨„Éô„É´Âà∂Âæ°ÔºàÊú¨Áï™Áí∞Â¢É„Åß„ÅØË©≥Á¥∞„É≠„Ç∞„ÇíÁÑ°ÂäπÂåñÔºâ
const isProduction = process.env.NODE_ENV === 'production'
const debugLog = isProduction ? () => {} : console.log
const infoLog = console.log

interface UseAnimationProps {
  mixerRef: React.RefObject<THREE.AnimationMixer | null>
}

export const useAnimation = ({ mixerRef }: UseAnimationProps) => {
  // „Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíË™≠„ÅøËæº„ÇÄÈñ¢Êï∞Ôºàmain„Éñ„É©„É≥„ÉÅ‰∫íÊèõ + TÂ≠ó„Éù„Éº„Ç∫‰øÆÊ≠£Ôºâ
  const loadIdleAnimation = useCallback(async (vrm: VRM) => {
    try {
      debugLog('üé≠ „Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë™≠„ÅøËæº„Åø‰∏≠...')
      
      // „Åæ„ÅöTÂ≠ó„Éù„Éº„Ç∫„Çí‰øÆÊ≠£
      if (mixerRef.current && vrm.humanoid) {
        const leftUpperArmNode = vrm.humanoid.getNormalizedBoneNode('leftUpperArm')
        const rightUpperArmNode = vrm.humanoid.getNormalizedBoneNode('rightUpperArm')
        
        const poseFixTracks: THREE.KeyframeTrack[] = []
        
        if (leftUpperArmNode) {
          const leftArmRotation = new THREE.QuaternionKeyframeTrack(
            leftUpperArmNode.name + '.quaternion',
            [0],
            [0, 0, -0.6, 0.8]  // ËÖï„Çí‰∏ã„Çç„Åó„Åü‰ΩçÁΩÆ„Å´Âõ∫ÂÆö
          )
          poseFixTracks.push(leftArmRotation)
        }
        
        if (rightUpperArmNode) {
          const rightArmRotation = new THREE.QuaternionKeyframeTrack(
            rightUpperArmNode.name + '.quaternion',
            [0],
            [0, 0, 0.6, 0.8]   // ËÖï„Çí‰∏ã„Çç„Åó„Åü‰ΩçÁΩÆ„Å´Âõ∫ÂÆö
          )
          poseFixTracks.push(rightArmRotation)
        }
        
        if (poseFixTracks.length > 0) {
          const poseClip = new THREE.AnimationClip('posefix', 0.1, poseFixTracks)
          const poseAction = mixerRef.current.clipAction(poseClip)
          poseAction.setLoop(THREE.LoopOnce, 1)
          poseAction.clampWhenFinished = true
          poseAction.play()
          debugLog('üé≠ T„Éù„Éº„Ç∫‰øÆÊ≠£ÈÅ©Áî®')
        }
      }
      
      // Ê¨°„Å´ÂÖ®Ë∫´„ÅÆÊè∫„Çå„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàVRMA„Éï„Ç°„Ç§„É´Ôºâ„ÇíË™≠„ÅøËæº„Åø
      try {
        const vrma = await loadVRMAnimation('./idle_loop.vrma')
        if (vrma && mixerRef.current) {
          const clip = vrma.createAnimationClip(vrm)
          const action = mixerRef.current.clipAction(clip)
          action.setLoop(THREE.LoopRepeat, Infinity)
          action.weight = 1.0  // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÅÆÈáç„Åø„Çí1.0„Å´Â¢óÂä†
          action.play()
          infoLog('üé≠ „Ç¢„Ç§„Éâ„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã')
        }
      } catch {
        debugLog('üé≠ VRM„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Â§±Êïó„ÄÅ„Ç∑„É≥„Éó„É´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Çí‰ΩøÁî®')
        
        // VRMA„ÅåË™≠„ÅøËæº„ÇÅ„Å™„ÅÑÂ†¥ÂêàÔºöÂÖ®Ë∫´„ÅÆËªΩ„ÅÑÊè∫„Çå„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        if (mixerRef.current && vrm.humanoid) {
          // Âà©Áî®ÂèØËÉΩ„Å™„Éú„Éº„É≥„ÇíË©≥Á¥∞Á¢∫Ë™ç
          debugLog('üé≠ „Éú„Éá„Ç£„Éú„Éº„É≥Á¢∫Ë™ç‰∏≠:')
          const spineNode = vrm.humanoid.getNormalizedBoneNode('spine')
          const hipsNode = vrm.humanoid.getNormalizedBoneNode('hips')
          const chestNode = vrm.humanoid.getNormalizedBoneNode('chest')
          const upperChestNode = vrm.humanoid.getNormalizedBoneNode('upperChest')
          
          debugLog('  spine:', spineNode ? spineNode.name : 'NOT FOUND')
          debugLog('  hips:', hipsNode ? hipsNode.name : 'NOT FOUND')
          debugLog('  chest:', chestNode ? chestNode.name : 'NOT FOUND')
          debugLog('  upperChest:', upperChestNode ? upperChestNode.name : 'NOT FOUND')
          
          const bodySwayTracks: THREE.KeyframeTrack[] = []
          
          // Ë¶ã„Å§„Åã„Å£„Åü„Éú„Éº„É≥„ÅßÂãï„Åç„Çí‰ΩúÊàê
          if (spineNode) {
            const spineSwayRotation = new THREE.QuaternionKeyframeTrack(
              spineNode.name + '.quaternion',
              [0, 3, 6, 9],
              [
                0, 0, 0, 1,           // Âü∫Êú¨ÂßøÂã¢
                0, 0.90, 0, 0.9,   // ËªΩ„ÅèÂ∑¶„Å´ÂõûËª¢ (ÂÄ§„Çí1.5ÂÄç„Å´Â¢óÂä†„ÄÅWÊàêÂàÜ„ÇíÂÜçË®àÁÆó)
                0, -0.90, 0, 0.9,  // ËªΩ„ÅèÂè≥„Å´ÂõûËª¢ (ÂÄ§„Çí1.5ÂÄç„Å´Â¢óÂä†„ÄÅWÊàêÂàÜ„ÇíÂÜçË®àÁÆó)
                0, 0, 0, 1            // Âü∫Êú¨ÂßøÂã¢„Å´Êàª„Çã
              ]
            )
            bodySwayTracks.push(spineSwayRotation)
            debugLog('  üé≠ ËÉåÈ™®ÂõûËª¢„Éà„É©„ÉÉ„ÇØËøΩÂä†')
          }
          
          if (hipsNode) {
            const hipsSwayRotation = new THREE.QuaternionKeyframeTrack(
              hipsNode.name + '.quaternion',
              [0, 3, 6, 9],
              [
                0, 0, 0, 1,         // Âü∫Êú¨ÂßøÂã¢
                0, 0.45, 0, 0.8930,  // Â∑¶„Å´ÂõûËª¢ (ÂÄ§„Çí1.5ÂÄç„Å´Â¢óÂä†„ÄÅWÊàêÂàÜ„ÇíÂÜçË®àÁÆó)
                0, -0.45, 0, 0.8930, // Âè≥„Å´ÂõûËª¢ (ÂÄ§„Çí1.5ÂÄç„Å´Â¢óÂä†„ÄÅWÊàêÂàÜ„ÇíÂÜçË®àÁÆó)
                0, 0, 0, 1          // Âü∫Êú¨ÂßøÂã¢„Å´Êàª„Çã
              ]
            )
            bodySwayTracks.push(hipsSwayRotation)
            debugLog('  üé≠ ËÖ∞ÂõûËª¢„Éà„É©„ÉÉ„ÇØËøΩÂä†')
          }
          
          if (chestNode) {
            const chestSwayRotation = new THREE.QuaternionKeyframeTrack(
              chestNode.name + '.quaternion',
              [0, 1.5, 3],
              [
                0, 0, 0, 1,         // Âü∫Êú¨ÂßøÂã¢
                0, 0, 0.05, 0.999,  // ËªΩ„ÅèÂ∑¶„Å´ÂõûËª¢
                0, 0, 0, 1          // Âü∫Êú¨ÂßøÂã¢„Å´Êàª„Çã
              ]
            )
            bodySwayTracks.push(chestSwayRotation)
            debugLog('  üé≠ ËÉ∏ÂõûËª¢„Éà„É©„ÉÉ„ÇØËøΩÂä†')
          }
          
          if (upperChestNode) {
            const upperChestSwayRotation = new THREE.QuaternionKeyframeTrack(
              upperChestNode.name + '.quaternion',
              [0, 2.5, 5],
              [
                0, 0, 0, 1,          // Âü∫Êú¨ÂßøÂã¢
                0.05, 0, 0, 0.999,   // ËªΩ„ÅèÂâç„Å´ÂÇæ„Åè
                0, 0, 0, 1           // Âü∫Êú¨ÂßøÂã¢„Å´Êàª„Çã
              ]
            )
            bodySwayTracks.push(upperChestSwayRotation)
            debugLog('  üé≠ ‰∏äËÉ∏ÂõûËª¢„Éà„É©„ÉÉ„ÇØËøΩÂä†')
          }
          
          if (bodySwayTracks.length > 0) {
            const bodySwayClip = new THREE.AnimationClip('bodysway', 9, bodySwayTracks)
            const bodySwayAction = mixerRef.current.clipAction(bodySwayClip)
            bodySwayAction.setLoop(THREE.LoopRepeat, Infinity)
            bodySwayAction.weight = 1.0  // „Éï„É´Èáç„Åø
            bodySwayAction.play()
            debugLog('üé≠ Âº∑„ÅÑ„Éú„Éá„Ç£„Çπ„Ç¶„Çß„Ç§„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈÅ©Áî®')
          }
        }
      }
    } catch (error) {
      console.error('üé≠ Failed to load idle animation:', error)
    }
  }, [mixerRef])

  return {
    loadIdleAnimation
  }
}